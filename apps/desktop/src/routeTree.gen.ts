/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as publicAuthImport } from './routes/(public)/_auth'
import { Route as protectedProtectedImport } from './routes/(protected)/_protected'
import { Route as protectedProtectedIndexImport } from './routes/(protected)/_protected/index'
import { Route as publicAuthTwoFactorImport } from './routes/(public)/_auth/two-factor'
import { Route as publicAuthSignUpImport } from './routes/(public)/_auth/sign-up'
import { Route as publicAuthSignInImport } from './routes/(public)/_auth/sign-in'
import { Route as protectedProtectedCreateImport } from './routes/(protected)/_protected/create'
import { Route as publicAuthTwoFactorSetupImport } from './routes/(public)/_auth/two-factor.setup'
import { Route as protectedProtectedDatabaseIdImport } from './routes/(protected)/_protected/database/$id'
import { Route as protectedProtectedDatabaseIdTablesImport } from './routes/(protected)/_protected/database/$id/tables'
import { Route as protectedProtectedDatabaseIdSqlImport } from './routes/(protected)/_protected/database/$id/sql'
import { Route as protectedProtectedDatabaseIdTablesTableImport } from './routes/(protected)/_protected/database/$id/tables.$table'

// Create Virtual Routes

const publicImport = createFileRoute('/(public)')()
const protectedImport = createFileRoute('/(protected)')()

// Create/Update Routes

const publicRoute = publicImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const protectedRoute = protectedImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRoute,
} as any)

const publicAuthRoute = publicAuthImport.update({
  id: '/_auth',
  getParentRoute: () => publicRoute,
} as any)

const protectedProtectedRoute = protectedProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => protectedRoute,
} as any)

const protectedProtectedIndexRoute = protectedProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => protectedProtectedRoute,
} as any)

const publicAuthTwoFactorRoute = publicAuthTwoFactorImport.update({
  id: '/two-factor',
  path: '/two-factor',
  getParentRoute: () => publicAuthRoute,
} as any)

const publicAuthSignUpRoute = publicAuthSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => publicAuthRoute,
} as any)

const publicAuthSignInRoute = publicAuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => publicAuthRoute,
} as any)

const protectedProtectedCreateRoute = protectedProtectedCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => protectedProtectedRoute,
} as any)

const publicAuthTwoFactorSetupRoute = publicAuthTwoFactorSetupImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => publicAuthTwoFactorRoute,
} as any)

const protectedProtectedDatabaseIdRoute =
  protectedProtectedDatabaseIdImport.update({
    id: '/database/$id',
    path: '/database/$id',
    getParentRoute: () => protectedProtectedRoute,
  } as any)

const protectedProtectedDatabaseIdTablesRoute =
  protectedProtectedDatabaseIdTablesImport.update({
    id: '/tables',
    path: '/tables',
    getParentRoute: () => protectedProtectedDatabaseIdRoute,
  } as any)

const protectedProtectedDatabaseIdSqlRoute =
  protectedProtectedDatabaseIdSqlImport.update({
    id: '/sql',
    path: '/sql',
    getParentRoute: () => protectedProtectedDatabaseIdRoute,
  } as any)

const protectedProtectedDatabaseIdTablesTableRoute =
  protectedProtectedDatabaseIdTablesTableImport.update({
    id: '/$table',
    path: '/$table',
    getParentRoute: () => protectedProtectedDatabaseIdTablesRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/_protected': {
      id: '/(protected)/_protected'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedProtectedImport
      parentRoute: typeof protectedRoute
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicImport
      parentRoute: typeof rootRoute
    }
    '/(public)/_auth': {
      id: '/(public)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicAuthImport
      parentRoute: typeof publicRoute
    }
    '/(protected)/_protected/create': {
      id: '/(protected)/_protected/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof protectedProtectedCreateImport
      parentRoute: typeof protectedProtectedImport
    }
    '/(public)/_auth/sign-in': {
      id: '/(public)/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof publicAuthSignInImport
      parentRoute: typeof publicAuthImport
    }
    '/(public)/_auth/sign-up': {
      id: '/(public)/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof publicAuthSignUpImport
      parentRoute: typeof publicAuthImport
    }
    '/(public)/_auth/two-factor': {
      id: '/(public)/_auth/two-factor'
      path: '/two-factor'
      fullPath: '/two-factor'
      preLoaderRoute: typeof publicAuthTwoFactorImport
      parentRoute: typeof publicAuthImport
    }
    '/(protected)/_protected/': {
      id: '/(protected)/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedProtectedIndexImport
      parentRoute: typeof protectedProtectedImport
    }
    '/(protected)/_protected/database/$id': {
      id: '/(protected)/_protected/database/$id'
      path: '/database/$id'
      fullPath: '/database/$id'
      preLoaderRoute: typeof protectedProtectedDatabaseIdImport
      parentRoute: typeof protectedProtectedImport
    }
    '/(public)/_auth/two-factor/setup': {
      id: '/(public)/_auth/two-factor/setup'
      path: '/setup'
      fullPath: '/two-factor/setup'
      preLoaderRoute: typeof publicAuthTwoFactorSetupImport
      parentRoute: typeof publicAuthTwoFactorImport
    }
    '/(protected)/_protected/database/$id/sql': {
      id: '/(protected)/_protected/database/$id/sql'
      path: '/sql'
      fullPath: '/database/$id/sql'
      preLoaderRoute: typeof protectedProtectedDatabaseIdSqlImport
      parentRoute: typeof protectedProtectedDatabaseIdImport
    }
    '/(protected)/_protected/database/$id/tables': {
      id: '/(protected)/_protected/database/$id/tables'
      path: '/tables'
      fullPath: '/database/$id/tables'
      preLoaderRoute: typeof protectedProtectedDatabaseIdTablesImport
      parentRoute: typeof protectedProtectedDatabaseIdImport
    }
    '/(protected)/_protected/database/$id/tables/$table': {
      id: '/(protected)/_protected/database/$id/tables/$table'
      path: '/$table'
      fullPath: '/database/$id/tables/$table'
      preLoaderRoute: typeof protectedProtectedDatabaseIdTablesTableImport
      parentRoute: typeof protectedProtectedDatabaseIdTablesImport
    }
  }
}

// Create and export the route tree

interface protectedProtectedDatabaseIdTablesRouteChildren {
  protectedProtectedDatabaseIdTablesTableRoute: typeof protectedProtectedDatabaseIdTablesTableRoute
}

const protectedProtectedDatabaseIdTablesRouteChildren: protectedProtectedDatabaseIdTablesRouteChildren =
  {
    protectedProtectedDatabaseIdTablesTableRoute:
      protectedProtectedDatabaseIdTablesTableRoute,
  }

const protectedProtectedDatabaseIdTablesRouteWithChildren =
  protectedProtectedDatabaseIdTablesRoute._addFileChildren(
    protectedProtectedDatabaseIdTablesRouteChildren,
  )

interface protectedProtectedDatabaseIdRouteChildren {
  protectedProtectedDatabaseIdSqlRoute: typeof protectedProtectedDatabaseIdSqlRoute
  protectedProtectedDatabaseIdTablesRoute: typeof protectedProtectedDatabaseIdTablesRouteWithChildren
}

const protectedProtectedDatabaseIdRouteChildren: protectedProtectedDatabaseIdRouteChildren =
  {
    protectedProtectedDatabaseIdSqlRoute: protectedProtectedDatabaseIdSqlRoute,
    protectedProtectedDatabaseIdTablesRoute:
      protectedProtectedDatabaseIdTablesRouteWithChildren,
  }

const protectedProtectedDatabaseIdRouteWithChildren =
  protectedProtectedDatabaseIdRoute._addFileChildren(
    protectedProtectedDatabaseIdRouteChildren,
  )

interface protectedProtectedRouteChildren {
  protectedProtectedCreateRoute: typeof protectedProtectedCreateRoute
  protectedProtectedIndexRoute: typeof protectedProtectedIndexRoute
  protectedProtectedDatabaseIdRoute: typeof protectedProtectedDatabaseIdRouteWithChildren
}

const protectedProtectedRouteChildren: protectedProtectedRouteChildren = {
  protectedProtectedCreateRoute: protectedProtectedCreateRoute,
  protectedProtectedIndexRoute: protectedProtectedIndexRoute,
  protectedProtectedDatabaseIdRoute:
    protectedProtectedDatabaseIdRouteWithChildren,
}

const protectedProtectedRouteWithChildren =
  protectedProtectedRoute._addFileChildren(protectedProtectedRouteChildren)

interface protectedRouteChildren {
  protectedProtectedRoute: typeof protectedProtectedRouteWithChildren
}

const protectedRouteChildren: protectedRouteChildren = {
  protectedProtectedRoute: protectedProtectedRouteWithChildren,
}

const protectedRouteWithChildren = protectedRoute._addFileChildren(
  protectedRouteChildren,
)

interface publicAuthTwoFactorRouteChildren {
  publicAuthTwoFactorSetupRoute: typeof publicAuthTwoFactorSetupRoute
}

const publicAuthTwoFactorRouteChildren: publicAuthTwoFactorRouteChildren = {
  publicAuthTwoFactorSetupRoute: publicAuthTwoFactorSetupRoute,
}

const publicAuthTwoFactorRouteWithChildren =
  publicAuthTwoFactorRoute._addFileChildren(publicAuthTwoFactorRouteChildren)

interface publicAuthRouteChildren {
  publicAuthSignInRoute: typeof publicAuthSignInRoute
  publicAuthSignUpRoute: typeof publicAuthSignUpRoute
  publicAuthTwoFactorRoute: typeof publicAuthTwoFactorRouteWithChildren
}

const publicAuthRouteChildren: publicAuthRouteChildren = {
  publicAuthSignInRoute: publicAuthSignInRoute,
  publicAuthSignUpRoute: publicAuthSignUpRoute,
  publicAuthTwoFactorRoute: publicAuthTwoFactorRouteWithChildren,
}

const publicAuthRouteWithChildren = publicAuthRoute._addFileChildren(
  publicAuthRouteChildren,
)

interface publicRouteChildren {
  publicAuthRoute: typeof publicAuthRouteWithChildren
}

const publicRouteChildren: publicRouteChildren = {
  publicAuthRoute: publicAuthRouteWithChildren,
}

const publicRouteWithChildren =
  publicRoute._addFileChildren(publicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof protectedProtectedIndexRoute
  '/create': typeof protectedProtectedCreateRoute
  '/sign-in': typeof publicAuthSignInRoute
  '/sign-up': typeof publicAuthSignUpRoute
  '/two-factor': typeof publicAuthTwoFactorRouteWithChildren
  '/database/$id': typeof protectedProtectedDatabaseIdRouteWithChildren
  '/two-factor/setup': typeof publicAuthTwoFactorSetupRoute
  '/database/$id/sql': typeof protectedProtectedDatabaseIdSqlRoute
  '/database/$id/tables': typeof protectedProtectedDatabaseIdTablesRouteWithChildren
  '/database/$id/tables/$table': typeof protectedProtectedDatabaseIdTablesTableRoute
}

export interface FileRoutesByTo {
  '/': typeof protectedProtectedIndexRoute
  '/create': typeof protectedProtectedCreateRoute
  '/sign-in': typeof publicAuthSignInRoute
  '/sign-up': typeof publicAuthSignUpRoute
  '/two-factor': typeof publicAuthTwoFactorRouteWithChildren
  '/database/$id': typeof protectedProtectedDatabaseIdRouteWithChildren
  '/two-factor/setup': typeof publicAuthTwoFactorSetupRoute
  '/database/$id/sql': typeof protectedProtectedDatabaseIdSqlRoute
  '/database/$id/tables': typeof protectedProtectedDatabaseIdTablesRouteWithChildren
  '/database/$id/tables/$table': typeof protectedProtectedDatabaseIdTablesTableRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(protected)': typeof protectedRouteWithChildren
  '/(protected)/_protected': typeof protectedProtectedRouteWithChildren
  '/(public)': typeof publicRouteWithChildren
  '/(public)/_auth': typeof publicAuthRouteWithChildren
  '/(protected)/_protected/create': typeof protectedProtectedCreateRoute
  '/(public)/_auth/sign-in': typeof publicAuthSignInRoute
  '/(public)/_auth/sign-up': typeof publicAuthSignUpRoute
  '/(public)/_auth/two-factor': typeof publicAuthTwoFactorRouteWithChildren
  '/(protected)/_protected/': typeof protectedProtectedIndexRoute
  '/(protected)/_protected/database/$id': typeof protectedProtectedDatabaseIdRouteWithChildren
  '/(public)/_auth/two-factor/setup': typeof publicAuthTwoFactorSetupRoute
  '/(protected)/_protected/database/$id/sql': typeof protectedProtectedDatabaseIdSqlRoute
  '/(protected)/_protected/database/$id/tables': typeof protectedProtectedDatabaseIdTablesRouteWithChildren
  '/(protected)/_protected/database/$id/tables/$table': typeof protectedProtectedDatabaseIdTablesTableRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create'
    | '/sign-in'
    | '/sign-up'
    | '/two-factor'
    | '/database/$id'
    | '/two-factor/setup'
    | '/database/$id/sql'
    | '/database/$id/tables'
    | '/database/$id/tables/$table'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create'
    | '/sign-in'
    | '/sign-up'
    | '/two-factor'
    | '/database/$id'
    | '/two-factor/setup'
    | '/database/$id/sql'
    | '/database/$id/tables'
    | '/database/$id/tables/$table'
  id:
    | '__root__'
    | '/(protected)'
    | '/(protected)/_protected'
    | '/(public)'
    | '/(public)/_auth'
    | '/(protected)/_protected/create'
    | '/(public)/_auth/sign-in'
    | '/(public)/_auth/sign-up'
    | '/(public)/_auth/two-factor'
    | '/(protected)/_protected/'
    | '/(protected)/_protected/database/$id'
    | '/(public)/_auth/two-factor/setup'
    | '/(protected)/_protected/database/$id/sql'
    | '/(protected)/_protected/database/$id/tables'
    | '/(protected)/_protected/database/$id/tables/$table'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  protectedRoute: typeof protectedRouteWithChildren
  publicRoute: typeof publicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  protectedRoute: protectedRouteWithChildren,
  publicRoute: publicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(protected)",
        "/(public)"
      ]
    },
    "/(protected)": {
      "filePath": "(protected)",
      "children": [
        "/(protected)/_protected"
      ]
    },
    "/(protected)/_protected": {
      "filePath": "(protected)/_protected.tsx",
      "parent": "/(protected)",
      "children": [
        "/(protected)/_protected/create",
        "/(protected)/_protected/",
        "/(protected)/_protected/database/$id"
      ]
    },
    "/(public)": {
      "filePath": "(public)",
      "children": [
        "/(public)/_auth"
      ]
    },
    "/(public)/_auth": {
      "filePath": "(public)/_auth.tsx",
      "parent": "/(public)",
      "children": [
        "/(public)/_auth/sign-in",
        "/(public)/_auth/sign-up",
        "/(public)/_auth/two-factor"
      ]
    },
    "/(protected)/_protected/create": {
      "filePath": "(protected)/_protected/create.tsx",
      "parent": "/(protected)/_protected"
    },
    "/(public)/_auth/sign-in": {
      "filePath": "(public)/_auth/sign-in.tsx",
      "parent": "/(public)/_auth"
    },
    "/(public)/_auth/sign-up": {
      "filePath": "(public)/_auth/sign-up.tsx",
      "parent": "/(public)/_auth"
    },
    "/(public)/_auth/two-factor": {
      "filePath": "(public)/_auth/two-factor.tsx",
      "parent": "/(public)/_auth",
      "children": [
        "/(public)/_auth/two-factor/setup"
      ]
    },
    "/(protected)/_protected/": {
      "filePath": "(protected)/_protected/index.tsx",
      "parent": "/(protected)/_protected"
    },
    "/(protected)/_protected/database/$id": {
      "filePath": "(protected)/_protected/database/$id.tsx",
      "parent": "/(protected)/_protected",
      "children": [
        "/(protected)/_protected/database/$id/sql",
        "/(protected)/_protected/database/$id/tables"
      ]
    },
    "/(public)/_auth/two-factor/setup": {
      "filePath": "(public)/_auth/two-factor.setup.tsx",
      "parent": "/(public)/_auth/two-factor"
    },
    "/(protected)/_protected/database/$id/sql": {
      "filePath": "(protected)/_protected/database/$id/sql.tsx",
      "parent": "/(protected)/_protected/database/$id"
    },
    "/(protected)/_protected/database/$id/tables": {
      "filePath": "(protected)/_protected/database/$id/tables.tsx",
      "parent": "/(protected)/_protected/database/$id",
      "children": [
        "/(protected)/_protected/database/$id/tables/$table"
      ]
    },
    "/(protected)/_protected/database/$id/tables/$table": {
      "filePath": "(protected)/_protected/database/$id/tables.$table.tsx",
      "parent": "/(protected)/_protected/database/$id/tables"
    }
  }
}
ROUTE_MANIFEST_END */
