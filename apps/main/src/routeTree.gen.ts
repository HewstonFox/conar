/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutProtectedImport } from './routes/_layout/_protected'
import { Route as LayoutAuthImport } from './routes/_layout/_auth'
import { Route as LayoutProtectedIndexImport } from './routes/_layout/_protected/index'
import { Route as LayoutAuthSignInImport } from './routes/_layout/_auth/sign-in'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutProtectedRoute = LayoutProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAuthRoute = LayoutAuthImport.update({
  id: '/_auth',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutProtectedIndexRoute = LayoutProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutProtectedRoute,
} as any)

const LayoutAuthSignInRoute = LayoutAuthSignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => LayoutAuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_auth': {
      id: '/_layout/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutAuthImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/_protected': {
      id: '/_layout/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutProtectedImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/_auth/sign-in': {
      id: '/_layout/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof LayoutAuthSignInImport
      parentRoute: typeof LayoutAuthImport
    }
    '/_layout/_protected/': {
      id: '/_layout/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutProtectedIndexImport
      parentRoute: typeof LayoutProtectedImport
    }
  }
}

// Create and export the route tree

interface LayoutAuthRouteChildren {
  LayoutAuthSignInRoute: typeof LayoutAuthSignInRoute
}

const LayoutAuthRouteChildren: LayoutAuthRouteChildren = {
  LayoutAuthSignInRoute: LayoutAuthSignInRoute,
}

const LayoutAuthRouteWithChildren = LayoutAuthRoute._addFileChildren(
  LayoutAuthRouteChildren,
)

interface LayoutProtectedRouteChildren {
  LayoutProtectedIndexRoute: typeof LayoutProtectedIndexRoute
}

const LayoutProtectedRouteChildren: LayoutProtectedRouteChildren = {
  LayoutProtectedIndexRoute: LayoutProtectedIndexRoute,
}

const LayoutProtectedRouteWithChildren = LayoutProtectedRoute._addFileChildren(
  LayoutProtectedRouteChildren,
)

interface LayoutRouteChildren {
  LayoutAuthRoute: typeof LayoutAuthRouteWithChildren
  LayoutProtectedRoute: typeof LayoutProtectedRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAuthRoute: LayoutAuthRouteWithChildren,
  LayoutProtectedRoute: LayoutProtectedRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutProtectedRouteWithChildren
  '/sign-in': typeof LayoutAuthSignInRoute
  '/': typeof LayoutProtectedIndexRoute
}

export interface FileRoutesByTo {
  '': typeof LayoutAuthRouteWithChildren
  '/sign-in': typeof LayoutAuthSignInRoute
  '/': typeof LayoutProtectedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/_auth': typeof LayoutAuthRouteWithChildren
  '/_layout/_protected': typeof LayoutProtectedRouteWithChildren
  '/_layout/_auth/sign-in': typeof LayoutAuthSignInRoute
  '/_layout/_protected/': typeof LayoutProtectedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/sign-in' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/sign-in' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/_auth'
    | '/_layout/_protected'
    | '/_layout/_auth/sign-in'
    | '/_layout/_protected/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/_auth",
        "/_layout/_protected"
      ]
    },
    "/_layout/_auth": {
      "filePath": "_layout/_auth.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/_auth/sign-in"
      ]
    },
    "/_layout/_protected": {
      "filePath": "_layout/_protected.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/_protected/"
      ]
    },
    "/_layout/_auth/sign-in": {
      "filePath": "_layout/_auth/sign-in.tsx",
      "parent": "/_layout/_auth"
    },
    "/_layout/_protected/": {
      "filePath": "_layout/_protected/index.tsx",
      "parent": "/_layout/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
