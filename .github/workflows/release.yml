name: Build and release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [macos-latest, ubuntu-latest, windows-latest]
        os: [macos-latest, ubuntu-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./apps/desktop/package.json').version")
          echo "version=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.4

      - name: Install Dependencies
        run: pnpm install

      - name: Build and Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          VERSION: ${{ steps.package-version.outputs.version }}
        run: pnpm run build:desktop

      - name: Codesign MacOS App
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.MACOS_CI_KEYCHAIN_PWD }}
        run: |
          # Clean up any existing keychains
          security delete-keychain build.keychain || true

          # Decode the certificate
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12

          # Create keychain with longer timeout
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain

          # Unlock keychain and make it default
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -s build.keychain

          # Import certificate with all permissions
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

          # Allow codesign to access keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Find the app bundle
          APP_PATH=$(find "./apps/desktop/release/${VERSION#v}/mac-universal" -name "*.app" -type d)
          echo "Found app at: $APP_PATH"

          # Sign the app with hardened runtime
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime --timestamp --deep "$APP_PATH" -v

      - name: Notarize MacOS App
        if: matrix.os == 'macos-latest'
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          # Find the app bundle
          APP_PATH=$(find "./apps/desktop/release/${VERSION#v}/mac-universal" -name "*.app" -type d)

          # Store notarization credentials
          xcrun notarytool store-credentials "notarytool-profile" \
            --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" \
            --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" \
            --password "$PROD_MACOS_NOTARIZATION_PWD"

          # Create zip for notarization
          ditto -c -k --keepParent "$APP_PATH" "notarization.zip"

          # Submit for notarization
          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

          # Staple the app
          xcrun stapler staple "$APP_PATH"
